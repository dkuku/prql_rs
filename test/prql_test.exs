defmodule PrqlTest do
  use ExUnit.Case, async: true
  doctest Prql

  describe "compile/1" do
    test "compiles a simple PRQL query to SQL" do
      prql = "from employees | select {name, age}"
      assert {:ok, sql} = Prql.compile(prql)
      assert sql == "SELECT name, age FROM employees"
    end

    test "compiles a more complex query with joins and aggregations" do
      prql = """
      from employees
      filter department == "Engineering"
      group {title} (
        aggregate {
          avg_salary = average salary,
          count_employees = count this
        }
      )
      sort {count_employees, title}
      """

      expected_sql =
        """
        SELECT title, AVG(salary) AS avg_salary, COUNT(*) AS count_employees
        FROM employees
        WHERE department = 'Engineering'
        GROUP BY title
        ORDER BY count_employees, title\
        """
        |> String.replace(~r/\s+/, " ")

      assert {:ok, sql} = Prql.compile(prql)

      # Normalize the SQL for comparison
      normalized_sql =
        sql
        |> String.trim()
        |> String.replace(~r/\s+/, " ")

      assert normalized_sql == expected_sql
    end

    test "returns error for invalid PRQL syntax" do
      assert {:error, reason} = Prql.compile("this is not valid prql")
      assert reason == "unexpected keyword prql"
    end

    test "handles empty input" do
      assert {:error, reason} = Prql.compile("")
      assert reason == "Missing main pipeline (Expected a declaration at main)"
    end
  end

  describe "compile/2" do
    setup do
      %{prql: "from employees | select {name, age}"}
    end

    test "with format: true adds newlines for better readability", %{prql: prql} do
      assert {:ok, sql} = Prql.compile(prql, format: true)

      assert sql ==
               """
               SELECT
                 name,
                 age
               FROM
                 employees
               """
    end

    test "with target: :postgres uses PostgreSQL dialect", %{prql: prql} do
      assert {:ok, sql} = Prql.compile(prql, target: :postgres)
      assert sql == "SELECT name, age FROM employees"
    end

    test "compiles with all dialects", %{prql: prql} do
      for dialect <- [
            :ansi,
            :big_query,
            :click_house,
            :duck_db,
            :generic,
            :glare_db,
            :ms_sql,
            :my_sql,
            :postgres,
            :sqlite,
            :snowflake
          ] do
        assert {:ok, sql} = Prql.compile(prql, target: dialect)
        assert sql == "SELECT name, age FROM employees"
      end
    end

    test "with signature_comment: true includes PRQL signature comment", %{prql: prql} do
      assert {:ok, sql} = Prql.compile(prql, signature_comment: true)
      assert sql =~ ~r/-- Generated by PRQL compiler/
    end

    test "with color: true includes ANSI color codes", %{prql: prql} do
      assert {:ok, sql} = Prql.compile(prql, color: true)
      # The color option might not produce ANSI codes in test environment
      # Just verify it compiles without error
      assert String.starts_with?(sql, "SELECT")
    end

    test "with display: :ansi_color compiles without error", %{prql: prql} do
      assert {:ok, sql} = Prql.compile(prql, display: :ansi_color)
      # Just verify it compiles without error
      assert String.starts_with?(sql, "SELECT")
    end

    test "with multiple options combined", %{prql: prql} do
      assert {:ok, sql} =
               Prql.compile(prql,
                 format: true,
                 target: :postgres,
                 signature_comment: true
               )

      assert sql =~ "Generated by PRQL compiler"
      assert String.starts_with?(sql, "SELECT\n  name,\n  age\nFROM\n  employees")
    end

    test "with invalid option returns no errors" do
      assert {:ok, "SELECT * FROM x"} =
               Prql.compile("from x", some_unknown_option: true)
    end

    test "with invalid target returns error" do
      assert {:error, "Unknown dialect: :invalid_dialect"} =
               Prql.compile("from x", target: :invalid_dialect)
    end
  end
end
